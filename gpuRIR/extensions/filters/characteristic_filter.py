import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import interp1d
from scipy.signal import istft, stft

from gpuRIR.extensions.filters.filter import FilterStrategy


class CharacteristicFilter(FilterStrategy):
    ''' Applies deviations of a frequency response (e.g. a microphone frequency response) to an audio signal via short time fourier transformation.
    '''

    def __init__(self, freq_response, T=25, hr=50, ps=1, fs=44100, nFFT=256, noverlap=int(256*0.75), window='hanning', visualize=False):
        ''' Instantiates frequency response filtering based on predefined models using short-time fourier transformation (STFT).
        For further reference about STFT parameters see scipy.signal.stft
        
        Parameters
	    ----------
        freq_response : 2d ndarray
            Frequency response array (mapping from frequency to attenuation/amplification) with examples defined in extensions/filters/characteristic_models.py (np array shape (n, 2), n = number of rows)
        visualize : bool, optional
            Enables plotting of frequency response.
        '''
        self.T = T
        self.hr = hr
        self.ps = ps
        self.fs = fs
        self.nFFT = nFFT
        self.noverlap = noverlap
        self.window = window
        self.freq_response = freq_response
        self.visualize = visualize
        self.NAME = "characteristic"

    @staticmethod
    def interpolate_frequency_response(freq_response, plot=False):
        ''' Interpolates frequency response array with 1D interpolated curves generated from given frequency response model.

        Parameters
	    ----------
        freq_response : 2D ndarray
            See __init__ from CharacteristicFilter.
        plot : bool, optional
            If True, plot frequency response graph.

        Returns
	    -------
        function
            Interpolation function f.
        '''
        # y: relative response [dB]
        # x: frequency [Hz]
        y = freq_response[:, 1]
        x = freq_response[:, 0]
        f = interp1d(x, y, fill_value=-100, bounds_error=False)
        x_interpolated = np.arange(1, 20000)
        y_interpolated = f(x_interpolated)
        if plot:
            plt.title('Characteristics Filter: Interpolated Frequency Response')
            plt.plot(x, y, 'o', x_interpolated, y_interpolated, "-")
            plt.show
        return f

    def apply_characteristic(self, RIR):
        ''' Applies characteristics filtering on the source data.

        Parameters
	    ----------
        RIRs : 2D ndarray
            Room impulse responses generated by gpuRIR.

        Returns
	    -------
        Processed RIRs.
        '''
        characteristic = self.interpolate_frequency_response(
            self.freq_response, self.visualize)

        # Calculate STFT of RIR (like spectrogram)
        f, t, RIR_TF = stft(
            RIR,
            self.fs,
            self.window,
            nperseg=self.nFFT,
            noverlap=self.noverlap,
            nfft=self.nFFT,
            boundary='even',
            padded=True,
            return_onesided=False
        )

        alphas = np.zeros((len(f), len(t)))

        # Create array for relative gains based on interpolated frequency response
        gains = characteristic(f)

        # Apply gain deviations based on gains array.
        for i in range(len(t)):
            alphas[:, i] = gains

        # Set lower bound for attenuation
        alphas[alphas < -100] = -100

        # Get calculated coeffs and apply them to the STFT of the RIR
        RIR_TF_processed = RIR_TF*np.power(10, (alphas/20))

        # Transform processed STFT of RIR back to time domain
        _, RIR_processed = istft(
            RIR_TF_processed,
            self.fs,
            self.window,
            nperseg=self.nFFT,
            noverlap=self.noverlap,
            nfft=self.nFFT
        )

        RIR_processed = RIR_processed[0:len(RIR)]
        return RIR_processed

    def apply(self, IR):
        ''' Calls method to apply characteristics filtering on the source data.

        Parameters
	    ----------
        IR : 2D ndarray
            Room impulse response array.

        Returns
	    -------
        2D ndarray
            Processed Room impulse response array.

        '''
        return self.apply_characteristic(IR)
